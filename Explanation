Login Form:

Inputs: Users can enter their name and phone number.
Login Button: When the user clicks the "Login" button, the form checks if both fields are filled. If they are, the user is logged in and the consultation interface is displayed.
Chat Interface:

Messages: The chat interface now includes messages from both the user and the doctor.
Input Field: Users can type messages and send them by clicking the "Send" button.
Timestamps: Each message is timestamped using the date-fns library.
Simulated Doctor Response: When the user sends a message, the simulateDoctorResponse function is called, which adds a random doctor's response to the chat after a 1-second delay.
Audio Call Interface:

Controls: Users can start or end an audio call.
Audio Stream: When the audio call is active, the user's audio is captured and played back using the <audio> element.
Video Call Interface:

Controls: Users can start or end a video call.
Video Stream: When the video call is active, the user's video is captured and displayed using the <video> element.
Prescriptions Section:

Add Prescription Button: Users can add a new prescription, which is stored in the prescriptions state.
Prescription List: Displays all stored prescriptions with a download button for each one.
Download Button: When clicked, generates a text file with the prescription details and triggers a download.
Notes
WebRTC: This example uses the browser's getUserMedia API to capture audio and video streams. For a full-fledged application, you would need to integrate WebRTC for peer-to-peer communication.
Styling: Tailwind CSS is used for styling to ensure the app is responsive and user-friendly.
State Management: React's useState and useEffect hooks are used to manage the state and lifecycle of the component.
This implementation provides a basic interactive interface for real-time doctor consultations via chat, audio, and video, with a login form, simulated doctor responses, and a section to store and download prescriptions.
