import { useState, useRef, useEffect } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Input } from "/components/ui/input"
import { Avatar, AvatarFallback, AvatarImage } from "/components/ui/avatar"
import { Clock } from "lucide-react"
import { format } from 'date-fns'
import { Download } from "lucide-react"

export default function MedicalConsultation() {
  const [messages, setMessages] = useState<{ sender: string, text: string, timestamp: Date }[]>([])
  const [inputValue, setInputValue] = useState('')
  const [audioCallActive, setAudioCallActive] = useState(false)
  const [videoCallActive, setVideoCallActive] = useState(false)
  const [audioStream, setAudioStream] = useState<MediaStream | null>(null)
  const [videoStream, setVideoStream] = useState<MediaStream | null>(null)
  const [isLoggedIn, setIsLoggedIn] = useState(false)
  const [name, setName] = useState('')
  const [phoneNumber, setPhoneNumber] = useState('')
  const [prescriptions, setPrescriptions] = useState<{ date: Date, details: string }[]>([])
  const audioRef = useRef<HTMLAudioElement | null>(null)
  const videoRef = useRef<HTMLVideoElement | null>(null)

  useEffect(() => {
    if (audioCallActive && !audioStream) {
      navigator.mediaDevices.getUserMedia({ audio: true })
        .then(stream => {
          setAudioStream(stream)
          if (audioRef.current) {
            audioRef.current.srcObject = stream
          }
        })
        .catch(err => console.error('Error accessing audio stream:', err))
    }

    if (videoCallActive && !videoStream) {
      navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
          setVideoStream(stream)
          if (videoRef.current) {
            videoRef.current.srcObject = stream
          }
        })
        .catch(err => console.error('Error accessing video stream:', err))
    }

    return () => {
      if (audioStream) {
        audioStream.getTracks().forEach(track => track.stop())
        setAudioStream(null)
      }
      if (videoStream) {
        videoStream.getTracks().forEach(track => track.stop())
        setVideoStream(null)
      }
    }
  }, [audioCallActive, videoCallActive, audioStream, videoStream])

  const sendMessage = () => {
    if (inputValue.trim()) {
      const userMessage = { sender: 'You', text: inputValue, timestamp: new Date() }
      setMessages([...messages, userMessage])
      setInputValue('')
      simulateDoctorResponse(userMessage.text)
    }
  }

  const simulateDoctorResponse = (userMessage: string) => {
    const doctorResponses = [
      "Hello, how are you feeling today?",
      "I see. Have you tried any medication?",
      "That's good to know. Let's proceed with the next steps.",
      "Thank you for your patience. I'll review your case.",
      "I recommend taking some rest and following these instructions."
    ]

    const randomResponse = doctorResponses[Math.floor(Math.random() * doctorResponses.length)]
    setTimeout(() => {
      setMessages(prevMessages => [...prevMessages, { sender: 'Doctor', text: randomResponse, timestamp: new Date() }])
    }, 1000) // Simulate a 1-second delay for the doctor's response
  }

  const toggleAudioCall = () => {
    setAudioCallActive(!audioCallActive)
  }

  const toggleVideoCall = () => {
    setVideoCallActive(!videoCallActive)
  }

  const handleLogin = () => {
    if (name && phoneNumber) {
      setIsLoggedIn(true)
    } else {
      alert('Please enter your name and phone number.')
    }
  }

  const addPrescription = () => {
    const prescriptionDetails = `Prescription for ${name} on ${format(new Date(), 'yyyy-MM-dd')}: Take 1 pill twice a day.`
    setPrescriptions([...prescriptions, { date: new Date(), details: prescriptionDetails }])
  }

  const downloadPrescription = (details: string) => {
    const blob = new Blob([details], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `prescription-${format(new Date(), 'yyyy-MM-dd')}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="flex flex-col items-center min-h-screen bg-white p-4">
      {!isLoggedIn ? (
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-2xl font-bold">Login</CardTitle>
          </CardHeader>
          <CardContent className="flex flex-col space-y-4">
            <div className="flex flex-col space-y-2">
              <Input
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter your name"
                className="flex-1"
              />
              <Input
                value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}
                placeholder="Enter your phone number"
                className="flex-1"
              />
            </div>
            <Button onClick={handleLogin}>Login</Button>
          </CardContent>
        </Card>
      ) : (
        <>
          <Card className="w-full max-w-3xl mb-4">
            <CardHeader>
              <CardTitle className="text-2xl font-bold">Medical Consultation</CardTitle>
            </CardHeader>
            <CardContent className="flex flex-col space-y-4">
              <div className="flex flex-col space-y-2">
                {messages.map((msg, index) => (
                  <div key={index} className={`flex ${msg.sender === 'You' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`flex items-center space-x-2 ${msg.sender === 'You' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'} p-2 rounded-lg max-w-md`}>
                      <Avatar>
                        <AvatarImage src={msg.sender === 'You' ? "https://github.com/nutlope.png" : "https://github.com/shadcn.png"} />
                        <AvatarFallback>{msg.sender === 'You' ? 'CN' : 'DC'}</AvatarFallback>
                      </Avatar>
                      <div>
                        <div className="font-semibold">{msg.sender}</div>
                        <div>{msg.text}</div>
                        <div className="text-xs text-gray-500"><Clock className="inline-block mr-1" /> {format(msg.timestamp, 'HH:mm:ss')}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="flex space-x-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="Type a message..."
                  className="flex-1"
                />
                <Button onClick={sendMessage}>Send</Button>
              </div>
            </CardContent>
          </Card>

          <div className="mt-4 flex space-x-4">
            <Button onClick={toggleAudioCall} variant={audioCallActive ? 'secondary' : 'default'}>
              {audioCallActive ? 'End Audio Call' : 'Start Audio Call'}
            </Button>
            <Button onClick={toggleVideoCall} variant={videoCallActive ? 'secondary' : 'default'}>
              {videoCallActive ? 'End Video Call' : 'Start Video Call'}
            </Button>
          </div>

          {audioCallActive && (
            <audio ref={audioRef} autoPlay playsInline className="mt-4" />
          )}

          {videoCallActive && (
            <video ref={videoRef} autoPlay playsInline className="mt-4 w-full max-w-3xl h-auto rounded-lg" />
          )}

          <Card className="w-full max-w-3xl mt-4">
            <CardHeader>
              <CardTitle className="text-2xl font-bold">Prescriptions</CardTitle>
            </CardHeader>
            <CardContent className="flex flex-col space-y-4">
              <Button onClick={addPrescription}>Add Prescription</Button>
              {prescriptions.map((prescription, index) => (
                <div key={index} className="flex items-center justify-between bg-gray-100 p-2 rounded-lg">
                  <div>
                    <div className="font-semibold">Prescription</div>
                    <div className="text-sm text-gray-500">{format(prescription.date, 'yyyy-MM-dd HH:mm:ss')}</div>
                    <div className="mt-1">{prescription.details}</div>
                  </div>
                  <Button variant="outline" onClick={() => downloadPrescription(prescription.details)}>
                    <Download className="inline-block mr-1" /> Download
                  </Button>
                </div>
              ))}
            </CardContent>
          </Card>
        </>
      )}
    </div>
  )
}
